import time
import pandas as pd
import numpy as np

CITY_DATA = { 'chicago': 'chicago.csv',
              'new york city': 'new_york_city.csv',
              'washington': 'washington.csv' }

def get_filters():
    """
    Asks user to specify a city, month, and day to analyze.

    Returns:
        (str) city - name of the city to analyze
        (str) month - name of the month to filter by, or "all" to apply no month filter
        (str) day - name of the day of week to filter by, or "all" to apply no day filter
    """
    print('Hello! Let\'s explore some US bikeshare data!')
    # TO DO: get user input for city (chicago, new york city, washington). HINT: Use a while loop to handle invalid inputs
    cities = ['washington', 'new york city', 'chicago']
    city=input("Please choose a city.").lower()
    while city not in cities:
        city=input("Please choose of the three cities, Washington, New Your City or Chicago").lower()


    # TO DO: get user input for month (all, january, february, ... , june)
    months = ['january', 'february', 'march', 'april', 'may', 'june']
    month = input("Please let us know which month you want to proceed with.").lower()
    while month not in months:
        month = input("Please choose one of the first six months.").lower()



    # TO DO: get user input for day of week (all, monday, tuesday, ... sunday)
    days = ['monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday']
    day = input("Please let us know which day you want to know more about, Monday, Tuesday,....").lower()
    while day not in days:
        day = input("Please write the day name correctly.").lower()



    print('-'*40)
    return city, month, day


def load_data(city, month, day):
    """
    Loads data for the specified city and filters by month and day if applicable.

    Args:
        (str) city - name of the city to analyze
        (str) month - name of the month to filter by, or "all" to apply no month filter
        (str) day - name of the day of week to filter by, or "all" to apply no day filter
    Returns:
        df - Pandas DataFrame containing city data filtered by month and day
    """
    df = pd.read_csv(CITY_DATA[city])
    df['Start Time'] = pd.to_datetime(df['Start Time'])
    df['month'] = df['Start Time'].dt.month
    df['day_of_week'] = df['Start Time'].dt.weekday_name
    df['hour'] = df['Start Time'].dt.hour
    if month != 'all':
        months = ['january', 'february', 'march', 'april', 'may', 'june']
        month = months.index(month) + 1
    df = df[df['month'] == month]
    if day != 'all':
        df =df[df['day_of_week'] == day.title()]

    return df


def time_stats(df):
    """Displays statistics on the most frequent times of travel."""

    print('\nCalculating The Most Frequent Times of Travel...\n')
    start_time = time.time()


    # TO DO: display the most common month
    mode_month = (df['month'].mode()[0])
    print("Our busiest month: ", mode_month)


    # TO DO: display the most common day of week
    mode_day = (df['day_of_week'].mode()[0])
    print("Our busiest day: ", mode_day)

    # TO DO: display the most common start hour
    mode_hour = (df['hour'].mode()[0])
    print("most of our customer use bikes around: ", mode_hour)

    print("\nThis took %s seconds." % (time.time() - start_time))
    print('-'*40)


def station_stats(df):
    """Displays statistics on the most popular stations and trip."""

    print('\nCalculating The Most Popular Stations and Trip...\n')
    start_time = time.time()

    # TO DO: display most commonly used start station
    mode_start_station = (df['Start Station'].mode()[0])
    print("The most common Start Station: ", mode_start_station)

    # TO DO: display most commonly used end station
    mode_end_station = (df['End Station'].mode()[0])
    print ("The most common End Station: ", mode_end_station)

    # TO DO: display most frequent combination of start station and end station trip
    mode_trip = ((df['Start Station'] + "to" + df['End Station']).mode()[0])
    print("the most common trip is ", mode_trip)

    print("\nThis took %s seconds." % (time.time() - start_time))
    print('-'*40)


def trip_duration_stats(df):
    """Displays statistics on the total and average trip duration."""

    print('\nCalculating Trip Duration...\n')
    start_time = time.time()

    # TO DO: display total travel time
    total_of_trip_duration = (df['Trip Duration'].sum())
    print("The total trip duration : ", total_of_trip_duration)

    # TO DO: display mean travel time
    trip_duration_average = (df['Trip Duration'].mean())
    print("the average trip duration : ", trip_duration_average)

    print("\nThis took %s seconds." % (time.time() - start_time))
    print('-'*40)


def user_stats(df):
    """Displays statistics on bikeshare users."""

    print('\nCalculating User Stats...\n')
    start_time = time.time()

    # TO DO: Display counts of user types
    user_type=df['User Type'].value_counts()
    print("Our Users are:\n",user_type)

    # TO DO: Display counts of gender

    if 'Gender' in df.columns:
        user_gender = df['Gender'].value_counts()
        print("our customer are: \n",user_gender)
    else:
        print("no available data")



    # TO DO: Display earliest, most recent, and most common year of birth


    if 'Birth Year' in df.columns:
        earlist_year=int(df['Birth Year'].min())
        recent_year=int(df['Birth Year'].max())
        common_year=int(df['Birth Year'].mode()[0])
        print("Our eldest user is born in : ",earlist_year)
        print("Our youngest is born in : ",recent_year)
        print("Most of our users were born in : ",common_year)
    else:
        print("no data available!")



    print("\nThis took %s seconds." % (time.time() - start_time))
    print('-'*40)

def display_data(df):
    data_view = input("Would you like to view the first five rows of data? Enter yes or no")
    loc_begin= 0
    while data_view != "no":
        print("Here you go: \n",df.iloc[loc_begin:loc_begin+5])
        loc_begin += 5
        data_view = input ("Would you like to view the following five rows of data?")

def main():
    while True:
        city, month, day = get_filters()
        df = load_data(city, month, day)

        time_stats(df)
        station_stats(df)
        trip_duration_stats(df)
        user_stats(df)
        display_data(df)

        restart = input('\nWould you like to restart? Enter yes or no.\n')
        if restart.lower() != 'yes':
            break


if __name__ == "__main__":
	main()
